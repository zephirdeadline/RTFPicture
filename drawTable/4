#include <stdlib.h>
#include <stdio.h>
#include <SDL/SDL.h>
#define ZEROX = 640/2
#define ZEROY = 480/2

void pause();
Uint32 getpixel( SDL_Surface *s, unsigned x, unsigned y);
void defPixel(SDL_Surface *s, int x, int y, Uint32 color);
float pow(int a);
float sizeCircle(int r);
void drag(SDL_Surface *t,int z, int q, int j, float a, float b, float c, float d);

int main(int argc, char *argv[])
{
  SDL_Init(SDL_INIT_VIDEO); // Initialisation de la SDL
  int zerox = 640/2, zeroy = 480/2;
  SDL_Surface *ecran = NULL;
  ecran = SDL_SetVideoMode(640, 480, 32, SDL_HWSURFACE);
  SDL_Rect position;
  position.x = 0;
  position.y = 0;
  int r = 100;

  SDL_Surface *Main = SDL_CreateRGBSurface(SDL_HWSURFACE,640,480,32,0,0,0,0);
  defPixel(Main, zerox, zeroy, SDL_MapRGB(Main->format,255,255,255));
  
/*dessine le cercle*/////////////////  
  for (int i = zerox-r; i<= zerox+r; i++)
    for(int j = zeroy-r; j <= zeroy+r; j++)
      if((pow(i-zerox) + pow(j-zeroy) > pow(r)) && (pow(i-zerox) + pow(j-zeroy) < pow(r+1))  )
        defPixel(Main, i, j, SDL_MapRGB(Main->format,255,255,255));
  

  float size;
 printf("taille: %f\n", size = sizeCircle(r)); 
 


/*Marque le Modulo *////////////////////

/*
  for (int i = zerox-r; i<= zerox+r; i++)
    for(int j = zeroy-r; j <= zeroy+r; j++)
      if((pow(i-zerox) + pow(j-zeroy) > pow(r)) && (pow(i-zerox) + pow(j-zeroy) < pow(r+1))  )
        defPixel(Main, i, j, SDL_MapRGB(Main->format,255,255,255));
*/
  
 drag(Main, zerox, zeroy, r,2, 2, 4, 8); 
  
  
  SDL_BlitSurface(Main, NULL, ecran, &position);

  SDL_Flip(ecran);
  pause();
  SDL_Quit();

  return EXIT_SUCCESS; 
}


void drag(SDL_Surface *s,int zerox, int zeroy,int r, float ax, float ay, float bx, float by)
{
  float coef = (by-ay)/(bx-ax);
  printf("coef dir: %f\n", coef);
  float b = zeroy;
  for (int i = 0; i< zerox*2; i++)
    for(int j = 0; j < zeroy*2; j++)
    {
      if(j == (int)(coef*(i)-zerox*2))
      {
        defPixel(s, i, j, SDL_MapRGB(s->format,255,255,255));
        //printf("ok"); 
      } 
//printf("OK j= %f, %d\n", coef*i+j, j);
      
    }
}

float sizeCircle(int r)
{
  return 2*3.1415 *r;
}


float pow(int a)
{
  return a*a;
}



Uint32 getpixel(SDL_Surface *surface,unsigned x, unsigned y)
{
  Uint8 *p=(Uint8 *)surface->pixels+y*surface->pitch+x*(surface->format->BytesPerPixel);
  switch (surface->format->BytesPerPixel)
  {
    case 1:
      return *p;
    case 2:
      return *(Uint16 *)p;
    case 3:
      if(SDL_BYTEORDER==SDL_BIG_ENDIAN)
        return p[0]<<16|p[1]<<8|p[2];
      else
        return p[0]|p[1]<<8|p[2]<<16;
    case 4:
      return *(Uint32 *)p;

  }
  return 0;
}


void defPixel(SDL_Surface *surface,int x,int y,Uint32 color)
{
  int byte=surface->format->BytesPerPixel;
  Uint8 *p=(Uint8 *)surface->pixels+y*surface->pitch+x*byte;
  switch(byte)
  {
    case 1:
      *p=color;
      break;
    case 2:
      *(Uint16*)p=color;
      break;
    case 3:
      if(SDL_BYTEORDER==SDL_BIG_ENDIAN)
      {
        p[0]=(color>>16)&0xff;
        p[1]=(color>>8)&0xff;
        p[2]=color & 0xff;
      }
      else
      {
        p[0]=color & 0xff;
        p[1]=(color>>8) &0xff;
        p[2]=(color>>16)& 0xff;
      }
      break;
    case 4:
      *(Uint32 *)p=color;
      break;
  }
}

void pause()
{
  int continuer = 1;
  SDL_Event event;

  while (continuer)
  {


      SDL_WaitEvent(&event);
      switch(event.type)
      {
      case SDL_QUIT:
      continuer = 0;
      }
  }
}
